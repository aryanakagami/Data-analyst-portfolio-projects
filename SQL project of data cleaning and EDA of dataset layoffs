-- PROJECT EDA AND DATA CLEANING USING SQL IN MYSQL BY ARYAN --


-- This is SQL project in which we are doing both , Data cleaning and EDA
-- Firstly , we will do Data Cleaning

--  We have to import data from wizard ( from a .csv file name layoffs )
--  Before that , we have to make a schema named world layoffs

SELECT *
FROM layoffs;

-- To do data cleaning , we majorly focuses on 4 factors
-- (1) Removing Duplicates 
-- (2) Standarzing the data
-- (3) Removing NULL and blank values
-- (4) Removing redundant column

-- (1) Removing Duplicates

-- We have to create a duplicate table so that we can prevent risk related to using DML commands.
-- Creating layoffs_staging(LS) as a precautionary table

CREATE TABLE layoffs_staging
LIKE layoffs;

-- Inspecting columns in LS

SELECT *
FROM layoffs_staging;

-- Inserting Values from layoffs into LS

INSERT INTO layoffs_staging
SELECT *
FROM layoffs;

-- Inspecting layoffs_staging

SELECT *
FROM layoffs_staging;

-- We want a row_num so that we can identify duplicates
-- There is a mistake in below query , we cannot use row_num as WHERE clause is evluating before row_num
-- We are partitioning by all columns names because we don't know that which value may differ and we can mistakly take it as duplicate

SELECT * , 
ROW_NUMBER() OVER(PARTITION BY company , location , industry , total_laid_off , percentage_laid_off , `date` , stage , country , funds_raised_millions ) AS row_num
FROM layoffs_staging
WHERE row_num > 1;

-- For solving this problem , we have to use CTE's

WITH duplicate_cte AS
(

SELECT * , 
ROW_NUMBER() OVER(PARTITION BY company , location , industry , total_laid_off , percentage_laid_off , `date` , stage , country , funds_raised_millions ) AS row_num
FROM layoffs_staging

)
SELECT *
FROM duplicate_cte 
WHERE row_num > 1;

-- For removing those , we need to make a new table as we cannot change table using CTE , let's create LS2

CREATE TABLE layoffs_staging2
LIKE layoffs_staging;

SELECT *
FROM layoffs_staging2;

-- Now adding new row , row_num for Row_num from LS

ALTER TABLE layoffs_staging2
ADD row_num int;

-- Inserting LS data

INSERT INTO layoffs_staging2
SELECT * , 
ROW_NUMBER() OVER(PARTITION BY company , location , industry , total_laid_off , percentage_laid_off , `date` , stage , country , funds_raised_millions ) AS row_num
FROM layoffs_staging;

-- Inspecting LS2

SELECT *
FROM layoffs_staging2
WHERE row_num > 1;

-- Deleting duplicates

DELETE 
FROM layoffs_staging2
WHERE row_num > 1;

-- Now , our data is free from duplicates

-- (2) Standarzing the data

SELECT company , TRIM(company)
FROM layoffs_staging2;

-- After using above query , we can see that their are some Gap issues related to standardization. We will update this trim data into LS2

UPDATE layoffs_staging2
SET company = TRIM(company);

-- Inspecting....

SELECT company , TRIM(company)
FROM layoffs_staging2;

SELECT DISTINCT(country) as loc
FROM layoffs_staging2
ORDER BY loc desc;

SELECT *
FROM layoffs_staging2
WHERE country LIKE 'United States.%';

-- We can see that their is a problem in United States and United States.

UPDATE layoffs_staging2
SET country = 'United States'
WHERE country LIKE 'United States%';

-- Inspecting ... 

SELECT *
FROM layoffs_staging2
WHERE country LIKE 'United States.%';

SELECT DISTINCT(industry) AS ind
FROM layoffs_staging2
ORDER BY ind;

-- We can see that crypto , CryptoCurrency and Crypto Currency is same as in whole , i.e. , crypto

UPDATE layoffs_staging2
SET industry = 'Crypto Currency'
WHERE industry LIKE 'Crypto%';

-- Inspecting...

SELECT *
FROM layoffs_staging2
WHERE industry LIKE 'Crypto%';

-- Date format is in text , we should make it into date format

SELECT `date` ,
str_to_date(`date`,'%m/%d/%Y') AS new_date
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET `date` = str_to_date(`date`,'%m/%d/%Y');

-- Inspecting ...

SELECT *
FROM layoffs_staging2;

-- But the datatype still does'nt changed , so we will use ALTER function

ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

-- Now it got changed...

-- (3) Removing NULL and blank values

SELECT *
FROM layoffs_staging2
WHERE industry IS NULL 
OR industry = '';

-- Let's make all blank values into NULL so that further query could be shorten

UPDATE layoffs_staging2
SET industry = NULL
WHERE industry = '';

-- Inspecting ...

SELECT *
FROM layoffs_staging2
WHERE industry IS NULL 
OR industry = '';

-- From here , we can identify that which of them are null , but we cannot remove them as we have to check if their respective industry is given or not

SELECT *
FROM layoffs_staging2 l1
	JOIN layoffs_staging2 l2
    ON l1.company = l2.company
WHERE l1.industry IS NULL
AND l2.industry IS NOT NULL;

-- Almost removed all of the main data / query problem , please don't forget WHERE clause

UPDATE layoffs_staging2 l1
JOIN layoffs_staging2 l2
    ON l1.company = l2.company
SET l1.industry = l2.industry
WHERE l1.industry IS NULL
AND l2.industry IS NOT NULL;

-- Inspecting ...

SELECT *
FROM layoffs_staging2 l1
	JOIN layoffs_staging2 l2
    ON l1.company = l2.company
WHERE l1.industry IS NULL
AND l2.industry IS NOT NULL;

-- (4) Removing redundant column

SELECT *
FROM layoffs_staging2
WHERE total_laid_off IS NULL 
AND percentage_laid_off IS NULL;

-- These columns are off no use as they are redundant to our EDA analysis . Lets remove those
-- Don't write DELETE LS2 :)


DELETE 
FROM layoffs_staging2
WHERE total_laid_off IS NULL 
AND percentage_laid_off IS NULL;

-- Inspecting...

SELECT *
FROM layoffs_staging2;

-- Now in last , let remove row_num

ALTER TABLE layoffs_staging2
DROP COLUMN row_num;

-- Data cleaning done --

-- Now , let's start EDA

-- In EDA , we explore the data and find the patterns and outliers in data

SELECT *
FROM layoffs_staging2;

-- Let's find out Max total laid off

SELECT MAX(total_laid_off) , MIN(total_laid_off)
FROM layoffs_staging2;

-- In percentage , 

SELECT MAX(percentage_laid_off),  MIN(percentage_laid_off)
FROM layoffs_staging2;

-- Now , let's see , in which companies percentage_laid_off is one (means whole company crashes) .

SELECT *
FROM layoffs_staging2
WHERE percentage_laid_off = 1
ORDER BY stage , funds_raised_millions DESC ;

-- Now , lets see sum of total laid off

SELECT company , SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY company
ORDER BY 2 DESC;

-- Let's see using date perspective ( for date range )

SELECT MIN(`date`) , MAX(`date`)
FROM layoffs_staging2;

-- Now , let's see which industry hit the most !!

SELECT industry , SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY industry
ORDER BY 2 DESC;

-- Let's also see by country

SELECT country , SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY country
ORDER BY 2 DESC;

-- By stages..

SELECT stage , SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY stage
ORDER BY 2 DESC;

-- Now , let's start grouping by date
-- yearwise ... 

SELECT YEAR(`date`) as year , SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY YEAR(`date`)
ORDER BY 2 DESC;

-- monthwise.. 

SELECT MONTH(`date`) as year , SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY MONTH(`date`)
ORDER BY 2 DESC;

-- But for better view and analysis , 

SELECT SUBSTRING(`date`,1,7) as year_mon , SUM(total_laid_off) 
FROM layoffs_staging2
WHERE SUBSTRING(`date`,1,7) IS NOT NUlL
GROUP BY year_mon
ORDER BY 1 ;

-- Now , let's see , how the layoffs progresses...

WITH rolling_total AS
(
SELECT SUBSTRING(`date`,1,7) as year_mon , SUM(total_laid_off) AS sum_off
FROM layoffs_staging2
WHERE SUBSTRING(`date`,1,7) IS NOT NUlL
GROUP BY year_mon
ORDER BY 1
)
SELECT year_mon , sum_off , SUM(sum_off) OVER(ORDER BY year_mon) AS rolling_total
FROM rolling_total;

-- Now , let's see how the layoff varying with year , and ranking them 

WITH company_name AS (
SELECT company , YEAR(`date`) AS year_list , SUM(total_laid_off) AS laid_off
FROM layoffs_staging2
GROUP BY company , year_list
),
layoffs_ranking AS
(
SELECT company , year_list ,laid_off, DENSE_RANK() OVER(PARTITION BY year_list ORDER BY laid_off DESC) AS ranking
FROM company_name
WHERE year_list IS NOT NULL
)
SELECT *
FROM layoffs_ranking
WHERE ranking <= 5;

-- In the above Complex query , we saw the flow of query as getting total laid off with year -> Created Ranking -> selected top 5 ranks
-- EDA ends

																                                                       -- EDA ends --
-- Project completed
															                                                        -- PROJECT ENDS --
                                 
 --  THANK YOU   --



